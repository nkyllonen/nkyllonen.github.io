doctype html
html(lang='en')

    head

        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1, shrink-to-fit=no')
        meta(name='description', content='')
        meta(name='author', content='')

        title Nikki Kyllonen's Portfolio

        link(rel='icon', type='image/x-icon', href='assets/img/favicon.ico')

        // Font Awesome icons (free version)
        script(src='https://use.fontawesome.com/releases/v6.1.0/js/all.js', crossorigin='anonymous')

        // Google fonts
        link(href='https://fonts.googleapis.com/css?family=Saira+Extra+Condensed:500,700', rel='stylesheet', type='text/css')
        link(href='https://fonts.googleapis.com/css?family=Muli:400,400i,800,800i', rel='stylesheet', type='text/css')

        // Core theme CSS (includes Bootstrap)
        link(href='css/styles.css', rel='stylesheet')

    body#page-top

        // Navigation
        nav#sideNav.navbar.navbar-expand-lg.navbar-dark.bg-primary.fixed-top
            a.navbar-brand.js-scroll-trigger(href='#page-top')
                span.d-block.d-lg-none Nikki Kyllonen
                span.d-none.d-lg-block
                    img.img-fluid.img-profile.rounded-circle.mx-auto.mb-2(src='assets/img/nikki_sm_square.jpg', alt='Profile picture')
            button.navbar-toggler(type='button', data-bs-toggle='collapse', data-bs-target='#navbarResponsive', aria-controls='navbarResponsive', aria-expanded='false', aria-label='Toggle navigation')
                span.navbar-toggler-icon
            #navbarResponsive.collapse.navbar-collapse
                ul.navbar-nav
                    li.nav-item
                        a.nav-link.js-scroll-trigger(href='#about') About
                    li.nav-item
                        a.nav-link.js-scroll-trigger(href='#hw1') Balloon Pop
                    li.nav-item
                        a.nav-link.js-scroll-trigger(href='#hw2') Baby Game Engine
                    li.nav-item
                        a.nav-link.js-scroll-trigger(href='#final') Unity Exploration

        // Page Content
        .container-fluid.p-0

            // About
            section#about.resume-section
                .resume-section-content
                    h1.mb-0
                        | CSCI 8980
                        span.text-primary Real-time Game Engine Technology
                    .subheading.mb-5
                        | Professor Stephen J. Guy · University of Minnesota, Twin Cities · Fall 2019
                    h3 Course Description
                    p.lead.mb-5
                        | The technology driving modern video games has brought forth new breakthroughs in real-time graphics, simulation, and artificial intelligence (AI), and has become increasingly common in wide range of entertainment, robotics, and virtual/augmented reality applications. In this course, we will cover the key algorithmic techniques that have enabled this revolution, investigate the trade-offs and limitations inherent in these real-time approaches, and discuss open problems and current trends in the field. Topics discussed will include real-time techniques for: physically-based lighting simulation, artificial intelligence (AI), sound simulation, character animation, and large-scale rendering.
                    h3 Course Work
                    p.lead.mb-5
                        | Students will participate in a combination of coding projects, student presentations, and class discussions. Coding projects will involve students writing their own real-time graphics, AI, and simulation code and integrate it into a broader framework. The course will take place in a computer lab, and substantial class time will be devoted to in-class programming. Classes are held in a computer lab, and course work will involve substantial in-class programming time with hands-on exploration of the course material. Additionally, students will be expected to present their projects to others in the class, and to provide substantial feedback and discussion of peer work.
                    b Who should enroll
                    p.lead.mb-5
                        | Students interested in real-time methods for computer simulation, interactive graphics, game programming, and AI.
                    b Prerequisites
                    p.lead.mb-5
                        | Experience in C++, data structures, using large code bases, and basic vector calculus (e.g., dot-products and gradients) is assumed. Previous experience in graphics programming helpful, but not strictly required.

            hr.m-0

            // HW1
            section#hw1.resume-section
                .resume-section-content
                    h2.mb-5 Balloon Pop Game

                    .d-flex.flex-column.flex-md-row.justify-content-between.align-items-center.mb-3
                        .d-flex.flex-grow-1.flex-row.align-items-center
                            h3.mb-0.me-4 HW1 - Game from Scratch
                            .social-icons
                              a.social-icon(href='https://github.com/nkyllonen/8980-balloon-pop')
                                  i.fab.fa-github
                        .flex-shrink-0
                            span.text-primary September 2019
                    .d-flex.flex-column.justify-content-between.mb-5
                      .d-flex.flex-column.figure
                        img(id="hw1-fig1" src="assets/img/8980/hw1-typical.png" class="figure-img" alt="Homework 1 example")
                        .figure-caption
                          p <b>Figure 1:</b> A typical Level 1 screen.

                      .subheading.mb-3 Gameplay / Game Design
                      p
                        | In this simple game, built in Processing, the player moves the green slider left and right to pop as many colorful balloons as possible and gain the most points. One point is gained for every good colorful balloon, while one point is lost for every evil black balloon that is popped. This score is presented along with the current level in the bottom left corner, as shown in <a href="#hw1-fig1">Figure 1</a>.
                      p
                        | As you gain points, you move onto more difficult levels. Currently, the levels increase one notch for every 10 points earned. Successive levels increase three of the game parameters: maximum balloon spawning speed, slider speed, and the chance a newly spawned balloon will be an evil balloon. Therefore, for every new level you face, not only are the balloons harder to pop and more likely to be evil, the slider is able to travel more quickly. This is the only power-up currently implemented. These values are adjusted as shown below (<a href="https://github.com/nkyllonen/8980-balloon-pop/blob/master/pop/pop.pde#L100"> pop.pde lines 100-104</a>).
                      pre
                        code(class="Processing" id="hw1-code1")
                          | // check score and update level
                          | level = score / 10 + 1;
                          | MAX_SPEED = 150 + level * 10;
                          | brick.speed = 5 + level;
                          | ENEMY_SPAWN_CHANCE = 0.05 + level * 0.05;
                      .figure-caption
                          p <b>Snippet 1:</b> Level-up parameter adjustments.
                      p
                        | There were quite a few features I had in mind while developing this game. I added to them as I went, but from the beginning, I hashed out two feature lists: basic features and more farfetched features. These I placed into my Trello board, as shown in <a href="#hw1-fig2">Figure 2</a> and <a href="#hw1-fig3">Figure 3</a>.
                      .d-flex.flex-column.figure
                        img(id="hw1-fig2" src="assets/img/8980/hw1-basic-features.png" class="figure-img" alt="Homework 1 basic features")
                        .figure-caption
                          p <b>Figure 2:</b> My checklist of basic features.
                      .d-flex.flex-column.figure
                        img(id="hw1-fig3" src="assets/img/8980/hw1-next-features.png" class="figure-img" alt="Homework 1 next features")
                        .figure-caption
                          p <b>Figure 3:</b> My checklist of more complex features.
                      p
                        | The biggest feature I tried to implement for this assignment was the use of a spatial data structure for collision testing (my first task within my "Next Steps" features list above). Despite the goal being to improve performance, after much thought and much work on implementation, I decided that the gameplay would not actually improve. Although I still wish to pursue this feature, other features that are listed above would've more easily accomplished the task of boosting gameplay, such as adding some sort of missiles or more complicated balloon movement.
                      .d-flex.flex-column.figure
                        img(id="hw1-fig4" src="assets/img/8980/hw1-pop-sparkles.gif" class="figure-img" alt="Homework 1 sparkles gif")
                        .figure-caption
                          p <b>Figure 4:</b> The sparkling gif used when good balloons explode. The feature I had the most fun implementing.

                      .subheading.mb-3 Algorithmic Discussion
                      p
                        | In developing this game, I allowed my strong Object-Oriented Programming (OOP) tendencies to lead my algorithmic and technical decisions. The strongest example of this is in my (ideally abstract) Object class, shown below (<a href="https://github.com/nkyllonen/8980-balloon-pop/blob/master/pop/object.pde">object.pde</a>). This is a stubby container class. There is no functionality and it likely hurts the overall runtime of the game. However, to myself and other OOP developers, the boost in understanding and organization seems very much worth it when handling the code. With containers such as Object and its children, <a href="https://github.com/nkyllonen/8980-balloon-pop/blob/master/pop/balloon.pde">Balloon</a> and <a href="https://github.com/nkyllonen/8980-balloon-pop/blob/master/pop/slider.pde">Slider</a>, larger code bases can be more readable and easier to digest.

            hr.m-0

        // Bootstrap core JS
        script(src='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js')

        // Core theme JS
        script(src='js/scripts.js')
